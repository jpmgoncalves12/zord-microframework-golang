package handlers

import (
	{{domainCamelCase}}Create "go-skeleton/internal/application/services/{{domain}}/CREATE"
	{{domainCamelCase}}Delete "go-skeleton/internal/application/services/{{domain}}/DELETE"
	{{domainCamelCase}}Edit "go-skeleton/internal/application/services/{{domain}}/EDIT"
	{{domainCamelCase}}Get "go-skeleton/internal/application/services/{{domain}}/GET"
	{{domainCamelCase}}List "go-skeleton/internal/application/services/{{domain}}/LIST"
	"go-skeleton/internal/repositories/{{domain}}"
	"go-skeleton/pkg"
	"go-skeleton/pkg/idCreator"
	"go-skeleton/pkg/logger"
	"go-skeleton/pkg/validator"

	"github.com/labstack/echo/v4"
)

type {{domainPascalCase}}Handlers struct {
	{{domainPascalCase}}Repository *{{domainCamelCase}}Repository.{{domainPascalCase}}Repository

	logger    *logger.Logger
	idCreator *idCreator.IdCreator
	validator *validator.Validator
}

func New{{domainPascalCase}}Handlers() *{{domainPascalCase}}Handlers {
	repository := {{domainCamelCase}}Repository.NewBaseRepository(pkg.Mysql)

	return &{{domainPascalCase}}Handlers{
		{{domainPascalCase}}Repository: repository,
		logger:          pkg.Logger,
		idCreator:       pkg.IdCreator,
		validator:       pkg.Validator,
	}
}

func (hs *{{domainPascalCase}}Handlers) HandleGet{{domainPascalCase}}(context echo.Context) error {
	s := {{domainCamelCase}}Get.NewService(hs.logger, hs.{{domainPascalCase}}Repository)
	data := new({{domainCamelCase}}Get.Data)

	if errors := context.Bind(data); errors != nil {
		return context.JSON(422, errors)
	}

	s.Execute(
		{{domainCamelCase}}Get.NewRequest(data),
	)
	response, err := s.GetResponse()
	if err != nil {
		return context.JSON(err.Status, err)
	}
	return context.JSON(response.Status, response)
}

func (hs *{{domainPascalCase}}Handlers) HandleCreate{{domainPascalCase}}(context echo.Context) error {
	s := {{domainCamelCase}}Create.NewService(hs.logger, hs.{{domainPascalCase}}Repository, hs.idCreator)
	data := new({{domainCamelCase}}Create.Data)

	if errors := context.Bind(data); errors != nil {
		return context.JSON(422, errors)
	}

	s.Execute(
		{{domainCamelCase}}Create.NewRequest(data, hs.validator),
	)
	response, err := s.GetResponse()
	if err != nil {
		return context.JSON(err.Status, err)
	}
	return context.JSON(response.Status, response)
}

func (hs *{{domainPascalCase}}Handlers) HandleEdit{{domainPascalCase}}(context echo.Context) error {
	s := {{domainCamelCase}}Edit.NewService(hs.logger, hs.{{domainPascalCase}}Repository)
	data := new({{domainCamelCase}}Edit.Data)

	if errors := context.Bind(data); errors != nil {
		return context.JSON(422, errors)
	}

	s.Execute(
		{{domainCamelCase}}Edit.NewRequest(data, hs.validator),
	)

	response, err := s.GetResponse()
	if err != nil {
		return context.JSON(err.Status, err)
	}
	return context.JSON(response.Status, response)
}

func (hs *{{domainPascalCase}}Handlers) HandleList{{domainPascalCase}}(context echo.Context) error {
	s := {{domainCamelCase}}List.NewService(hs.logger, hs.{{domainPascalCase}}Repository)
	data := new({{domainCamelCase}}List.Data)

	bindErr := echo.QueryParamsBinder(context).
		Int("page", &data.Page).
		BindError()

	if bindErr != nil {
		return context.JSON(400, bindErr)
	}

	s.Execute(
		{{domainCamelCase}}List.NewRequest(data),
	)
	response, err := s.GetResponse()
	if err != nil {
		return context.JSON(err.Status, err)
	}
	return context.JSON(response.Status, response)
}

func (hs *{{domainPascalCase}}Handlers) HandleDelete{{domainPascalCase}}(context echo.Context) error {
	s := {{domainCamelCase}}Delete.NewService(hs.logger, hs.{{domainPascalCase}}Repository)
	data := new({{domainCamelCase}}Delete.Data)

	if errors := context.Bind(data); errors != nil {
		return context.JSON(422, errors)
	}

	s.Execute(
		{{domainCamelCase}}Delete.NewRequest(data),
	)
	response, err := s.GetResponse()
	if err != nil {
		return context.JSON(err.Status, err)
	}
	return context.JSON(response.Status, response)
}
